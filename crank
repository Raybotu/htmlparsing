#!/usr/bin/env perl

use strict;
use warnings;

eval 'use Carp::Always'; # Not everyone has it

use Getopt::Long;
use File::Slurp;
use Encode qw(decode_utf8);
use Text::Markdown ();
use Template ();
use Template::Constants qw( :debug :chomp );

my $sourcepath = 's';
my $buildpath  = 'build';

GetOptions(
    'sourcepath:s' => \$sourcepath,
    'buildpath:s'  => \$buildpath,
) or exit;

-d $buildpath && -w $buildpath or die;

my $pages = [
    index      => 'Home',
    java       => 'Java',
    perl       => 'Perl',
    php        => 'PHP',
    python     => 'Python',
    regexes    => 'Regexes',
#    asp        => 'ASP',
#    coldfusion => 'ColdFusion',
#    csharp     => 'C#',
#    delphi     => 'Delphi',
#    dotnet     => '.NET',
#    perl       => 'Perl',
#    php        => 'PHP',
#    postgresql => 'PostgreSQL',
#    ruby       => 'Ruby',
#    scheme     => 'Scheme',
];

MAIN: {
    my $m = Text::Markdown->new;

    my @sidelinks;

    my %tt_defaults = (
        INCLUDE_PATH => [ qw( tt ) ],
        OUTPUT_PATH  => $buildpath,
        DEBUG        => DEBUG_UNDEF,
        TRIM         => CHOMP_ALL,
        PRE_CHOMP    => 1,
        POST_CHOMP   => 1,
        ENCODING     => 'utf8',
    );

    my $tt = Template->new( \%tt_defaults );

    my @pages = @{$pages};
    while ( @pages ) {
        my ($section,$desc) = splice( @pages, 0, 2 );
        my $path = ($section eq 'index') ? './' : "./$section.html";
        push( @sidelinks, {
            path => $path,
            text => $desc,
        } );
    }

    my $vars = {
        sidelinks => \@sidelinks,
    };

    @pages = @{$pages};
    while ( @pages ) {
        my ($section,$desc) = splice( @pages, 0, 2 );

        my $source = read_file( "$sourcepath/$section.md" );
        my $html   = $m->markdown( $source );
        $html      =~ s{<code>\n}{<code>}smxg;

        $vars->{body}     = $html;
        $vars->{currlang} = ( $desc eq 'Home' ) ? '' : $desc;
        $tt->process( 'page.ttml', $vars, "$section.html", { binmode => ':encoding(UTF-8)' } )
            || die sprintf("file: %s\nerror: %s\n", "$section.html", $tt->error);
    }
}
